---
# Привет! Я постарался описать все возможные читаемые докером параметры.
# В работе, тебе понадобится лишь их часть.

# Версия docker-compose. Необязательна для указания в современных версиях.
version: "3.8"

# В блоке 'services' мы указываем наши контейнеры. Каждое слово, что
# заканчивается двоеточием тут -- контейнер.
services:
  # 'webserver' это системное название нашего контейнера. 
  # Можешь назвать его как угодно (н-р 'ya-krutoi').
  webserver:
    # --- Дальше идёт настройка самого контейнера ---

    # 'image' указывает какой образ с Docker Hub по умолчанию мы используем
    # Выглядит как 'название:тэг'. 
    # Конкретно тут переменная ${NGINX_IMAGE_TAG} подставляется из .env
    image: nginx:${NGINX_IMAGE_TAG}

    # 'container_name' называет контейнер. Ты видишь это название в свойствах контейнера.
    container_name: my-awesome-nginx

    # 'hostname' указывает название хоста внутри контейнера.
    hostname: nginx-host

    # --- Сетевые дела ---

    # 'ports' maps ports from the host machine to the container (HOST:CONTAINER).
    # 'ports' указывает порты, по которым будет доступен контейнер в формате:
    # ОТКРЫТЫЙ_ПОРТ_ХОСТА:ОТКРЫТЫЙ_ПОРТ_КОНТЕЙНЕРА
    # Н-р в этом случае, вебсервис в контейнере (nginx) будет доступен с localhost:8080
    ports:
      - "80:80"

    # 'networks' создаёт сети.
    # По умолчанию, все контейнеры docker-compose.yml доступны по всем портам друг другу.
    # Им можно присвоить разные сети.
    # Н-р, в этом случае контейнер 'webserver' принадлежит к сети "haiii-network"
    networks:
      haiii-network:

    # 'expose' exposes a port only to other services on the same network, without publishing to the host.
    # 'expose' открывает порт только другим сервисам в той же сети, но не хосту, на котором запущен контейнер.
    expose:
      - "8081"

    # --- Томы и постоянство данных ---

    # 'volumes' mount host paths or named volumes into the container (HOST/VOLUME:CONTAINER:MODE).
    # 'volumes' монтирует путь на хосте в контейнер в формате:
    # ПУТЬ_ХОСТА/ПУТЬ_В_КОНТЕЙНЕРЕ:НАЗВАНИЕ_КОНТЕЙНЕРА:РЕЖИМ
    # Точка в пути означает тот же каталог, в котором находится docker-compose.yml
    # Не забудь создать папку, которую хочешь смонтировать!
    volumes:
      - ./html:/usr/share/nginx/html:ro

    # --- Переменные окружения ---
    # ПЕРЕМЕННАЯ=ЗНАЧЕНИЕ
    environment:
      - NGINX_HOST=haiii.domain.com
      - NGINX_PORT=80

    # Тут можно указать, переменные из какого файла загружать.
    # env_file:
    #   - ./.env.production

    # --- Политики и здоровье (ну и название...) ---

    # 'restart' указывает, что делать с контейнером если тот останавливается.
    restart: unless-stopped

    # 'healthcheck' указывает как проверять здоровье контейнера.
    # Docker будет решать что делать если проверка проваливается.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"] # Команда для проверки
      interval: 30s    # Как часто проверять здоровье
      timeout: 10s     # Сколько времени ждать ответа
      retries: 3       # Сколько проверок он может провалить прежде чем контейнер становится нездоровым
      start_period: 15s # Период ожидания перед началом проверок

    # --- Зависимости и порядок запуска & STARTUP ORDER ---
    
    # 'depends_on' указывает старта каких контейнеров ждать перед стартом этого контейнера
    # depends_on:
    #   - postgres
    #   - keycloak

    # --- Управление ресурсами (продвинутое) ---
    
    # 'deploy' указывает с какими ресурсами работает. Обычно, используется в случае k8s или docker swarm 
    deploy:
      replicas: 1 # Сколько контейнеров заказать
      resources:
        limits:
          cpus: '0.5'   # Максимальное возможное потребление процессора (полядра)
          memory: 512M   # Максимальное возможное потребление оперативной памяти (512 мегабайт)
        reservations:
          cpus: '0.25'   # Минимально возможное потребление процессора
          memory: 128M   # Минимально возможное потребление оперативной памяти

    # --- Логирование (продвинутое) ---

    # 'logging' настраивает логирование контейнера, т.е. что делать с тем текстом, который ты видишь при его запуске.
    logging:
      driver: "json-file" # Драйвер для логов
      options:
        max-size: "200k"  # Максимальный размер логфайла до ротации (создание нового логфайла).
        max-file: "10"    # Максимальное количество логфайлов. Удаление начнётся с самых старых логфайлов

    # --- Разное ---

    # 'labels' добавляет метаданные контейнеру. Обычно используется CI системами.
    labels:
      - "com.nginx.haiii=hewwooo"

    # 'user' позволяет запускать контейнер с правами определённого пользователя.
    # user: "101:101" # Означает, что контейнер создастся пользователем с ID 101 и GID 101

    # 'command' указывает команду, которая будет запущена после того, как контейнер запустится.
    # command: ["nginx", "-g", "daemon off;"]

# Блок, в котором создаются сети.
networks:
  haiii-network:
    driver: bridge

    
